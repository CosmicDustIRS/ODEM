function [ plateID , dirRay_all ] = findFacet_by_LatLon( lat_min, lat_max, lon_min, lon_max, shape_handle, plot_vecLatLonJet)
% This function finds ShapeModel-facets according to a
% latidude/longitude-input
%   Intercept points are generated by using a set of rays which point
%   toward the origin. Its vertices are on a specified lat/lon grid OUTSIDE
%   of the target body.

plateID = [];
dirRay_all = [];

%% Open the DSK file for read access
%shape_handle = cspice_dasopr( file_path );          % already defined in Load_ShapeModel.m --> to be defined in ODEM_main

%% Forward search through the kernel, treating file as a DLA. 'dladsc' is
% the DLA descriptor of the first segment
[dladsc, found] = cspice_dlabfs( shape_handle );

if ~found   % kernel contains no segments
    fprintf( 'No segments found in DSK file %s\n', file_path );
    return
end

%% cspice_dskgd returns the DSK descriptor from a DSK segment
% identified by a DAS handle and DLA descriptor.
dskdsc = cspice_dskgd( shape_handle, dladsc );

%% Extract the upper radius bound from the DSK descriptor
 r_max = 1.5;          % !!!!!!
 r_out = 2 * r_max;

%% Generate the intercept points
%
nLat = lat_max - lat_min;           % integer values for search-loop over
nLon = lon_max - lon_min;           % each degree of lat/lon

for i = 0:0.1:nLat
    
    % Lat value from north to south by increment of 1deg
    lat = pi/180 * ( lat_min + i ); 
    
    for j = 0:0.1:nLon
        
        % Lon value from west to east by increment of 1deg
        
        lon = pi/180 * ( lon_min + j); 
        % Ellipsoid instead of sphere for radius calculation. PCK values
        % for values a and b of ellipsoid
%          r_out = 1.5 * sqrt( (2.4^2 * 1.6^2)/(1.6^2 * (cos(2*pi-lon))^2 + 2.4^2 * (sin(2*pi-lon))^2) );
        % Ray vertex for current lat/lon value. Negate vertex to produce
        % the ray's direction vector (vector from outside to inside needed
        % for function cspice_latrec
        %
        vertex = cspice_latrec( r_out, lon, lat );
        dirRay = -vertex;
        
        %% Find the surface intercept for this ray by function cspice_dskx02
        % plid      plate ID
        % xpt       cartesian coordinates in bodyfixed system
        % found     boolean for existance of interception
        [plid, ~, found] = cspice_dskx02( shape_handle, dladsc, vertex, dirRay );
        
        if ~found   % unlikely since ray passes through origin
            
            fprintf( '\n' );
            fprintf( 'Intercept not found!\n' );
            fprintf( '  Ray vertex: \n' );
            fprintf( '  Longitude   (deg): %f\n', lon * 180 / pi );
            fprintf( '  Latitude    (deg): %f\n', lat * 180 / pi );
            fprintf( '  Radius       (km): %f\n', r_out );
        
        else
            
            plateID = [plateID ; plid];
            
        end
        
        % Add dirRay to array dirRay_latlon
%         if (j == 0) || (j == nLon)
        if plot_vecLatLonJet
            dirRay_all = [dirRay_all dirRay]; 
        end
%         end

   
    end
    
end

% Sort out equal platIDs
plateID = unique(plateID);

%% Close file
%cspice_dascls( shape_handle );
    

end

